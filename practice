/* jshint esversion: 6 */

// Solve the following prompts using recursion.

// 1. Calculate the factorial of a number. The factorial of a non-negative integer n,
// denoted by n!, is the product of all positive integers less than or equal to n.
// Example: 5! = 5 x 4 x 3 x 2 x 1 = 120
// factorial(5); // 120
var factorial = function(n) {
    if (n < 0) {
    return null;
    } else if (n === 0 || n === 1) {
    return 1;
    } else {
    return n * factorial(n - 1);
    };
};

// 2. Compute the sum of an array of integers.
// sum([1,2,3,4,5,6]); // 21

var sum = function(array) {
    if (array.length === 0) {
      return 0;
    } else {
      return array[0] + sum(array.slice(1, array.length));
    };
  };


// 3. Sum all numbers in an array containing nested arrays.
// arraySum([1,[2,3],[[4]],5]); // 15
var arraySum = function(array) {
  var sum = 0;

  if (array.length === 0) {
    return sum;
  } else {
    var i = 0;
    while ( i < array.length) {
      var element = array[i];
      if (Array.isArray(element)) {
        sum += arraySum(element);
        i += 1;
      } else {
        sum += element
        i += 1;
      };
    };
};


return sum;
};


// 4. Check if a number is even.
var isEven = function(n) {
  if (n < 0) {
      if (n === 0) {
          return true;
      } else if (n === 1) {
          return(false);
      } else {
          return isEven(n + 2);
      };
  } else {
      if (n === 0) {
          return true;
      }else if (n === 1) {
          return(false);
      } else {
          return isEven(n -2);
      };
  };
};

// 5. Sum all integers below a given integer.
// sumBelow(10); // 45
// sumBelow(7); // 21
var sumBelow = function(n) {
  var sum = 0;

  if (n > 0) {
    if ( n === 0) {
      return sum
    } else {
      var oneLess = n - 1
      return oneLess + sumBelow(oneLess);
};
 
  } else {
    if (n === 0) {
      return sum 
    } else {
      var oneLess = n + 1;
      return oneLess + sumBelow(oneLess);
    };
  };
};

// 6. Get the integers within a range (x, y).
// range(2,9); // [3,4,5,6,7,8]
var range = function(x, y, r = []) {
  const step = x > y? -1 : 1;
  if(x === y) return [];
  if(x === y - step) return r;
  return r.concat(x + step, range(x + step, y));
}
console.log(range(2,9));


// 7. Compute the exponent of a number.
// The exponent of a number says how many times the base number is used as a factor.
// 8^2 = 8 x 8 = 64. Here, 8 is the base and 2 is the exponent.
// exponent(4,3); // 64
// https://www.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number
let exponent = function ( base, exp ) {
  // base case
  if ( exp === 0 ) {
      return 1;
  }

  // recursive cases!
  return exp > 0 ? base * exponent( base, exp - 1 ) : 1 / ( base * exponent( base, -1 * exp - 1 ) );
};
